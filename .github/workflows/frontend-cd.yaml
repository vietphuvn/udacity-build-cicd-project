# Workflow name
name: Frontend CD

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch: null
  
  # Automatic trigger on push events to the main branch
  push:
    branches:
      - main
    paths:
      - "frontend/**"

jobs:
  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: "./frontend/package-lock.json"
      - name: Install dependencies
        run: cd frontend && npm ci
      - name: Run test
        run: cd frontend && npm test
  
  build-job:
    needs: [test-job]
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCOUNT_ID: 814792666257
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: "./frontend/package-lock.json"
      - name: Install dependencies
        run: cd frontend && npm ci
      - name: Run test
        run: cd frontend && npm test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
      # - name: build and push to ECR
      #   run: |
      #     aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      #     cd frontend
      #     docker build --build-arg=REACT_APP_MOVIE_API_URL=http://backend:5000 --tag=mp-frontend:latest .
      #     docker tag mp-frontend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/frontend:latest
      #     docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/frontend:latest

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          cd frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://backend -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy-to-k8-job:
    needs: [build-job]
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCOUNT_ID: 814792666257
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: 
        uses: azure/setup-kubectl@v3
        id: install

      - name: Deploy to K8
        run: |
          cd frontend
          cd k8s
          aws eks update-kubeconfig --name cluster
          kubectl apply -k .